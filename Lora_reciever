#include <Wire.h>
#include "LoRaWan_APP.h"
#include "Arduino.h"

// I2C Pin and Device Address
#define SDA_PIN 19
#define SCL_PIN 20
#define I2C_DEV_ADDR 0x51

// LoRa Parameters
#define RF_FREQUENCY 915000000 // Hz
#define TX_OUTPUT_POWER 14     // dBm
#define LORA_BANDWIDTH 0       // [0: 125 kHz, 1: 250 kHz, 2: 500 kHz]
#define LORA_SPREADING_FACTOR 7 // [SF7..SF12]
#define LORA_CODINGRATE 1       // [1: 4/5, 2: 4/6, 3: 4/7, 4: 4/8]
#define LORA_PREAMBLE_LENGTH 8  // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT 0   // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON false
#define LORA_IQ_INVERSION_ON false
#define RX_TIMEOUT_VALUE 1000
#define BUFFER_SIZE 30 // Define the payload size here

// Global Variables
volatile uint8_t rxBuffer[32];  // I2C received data buffer
volatile size_t dataLength = 0;
int keypadValue = -1;           // Global variable to store the keypad value

char txpacket[BUFFER_SIZE]; // LoRa transmit buffer
char rxpacket[BUFFER_SIZE]; // LoRa receive buffer

static RadioEvents_t RadioEvents;

int16_t rssi, rxSize;
bool lora_idle = true;

// Function Prototypes
void onReceive(int len);
void onRequest();
void storeKeypadValue();
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr);
void setupI2C();
void setupLoRa();

// I2C Event Handlers
void onReceive(int len) {
    memset((void *)rxBuffer, 0, sizeof(rxBuffer)); // Clear buffer
    dataLength = 0;

    Serial.printf("Data received [%d]: ", len);
    while (Wire.available()) {
        size_t length = dataLength; // Temporary non-volatile copy
        if (length < sizeof(rxBuffer)) {
            rxBuffer[length] = Wire.read();
            Serial.printf("%X ", rxBuffer[length]); // Print in HEX
            dataLength = length + 1; // Assign incremented value back
        }
    }
    Serial.println();

    // Store the received keypad value
    storeKeypadValue();
}

void onRequest() {
    Wire.write((const uint8_t *)rxBuffer, dataLength);
    Serial.println("Data sent to master.");
    memset((void *)rxBuffer, 0, sizeof(rxBuffer)); // Clear buffer after sending
}

/**
 * @brief Stores the value from the keypad into a global variable.
 */
void storeKeypadValue() {
    if (dataLength > 0) {
        keypadValue = rxBuffer[0]; // Store the first value from the buffer
        Serial.printf("Keypad Value Stored: %d\n", keypadValue);
    } else {
        keypadValue = -1; // Reset the value if no valid data
    }
}

/**
 * @brief LoRa RX Done event handler
 */
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
    rssi = rssi;
    rxSize = size;
    memcpy(rxpacket, payload, size);
    rxpacket[size] = '\0';
    Radio.Sleep();
    Serial.printf("\r\nReceived packet \"%s\" with RSSI %d, length %d\r\n", rxpacket, rssi, rxSize);
    lora_idle = true;
}

void setup() {
    Serial.begin(115200);

    setupI2C();  // Initialize I2C
    setupLoRa(); // Initialize LoRa
}

void loop() {
    if (keypadValue == 1) { // Check if the keypad input is '1'
        if (lora_idle) {
            lora_idle = false;
            Serial.println("Requesting data from sender...");
            Radio.Rx(0); // Enter RX mode
        }
    }

    Radio.IrqProcess(); // Process LoRa IRQ
    delay(100); // Small delay for stability
}

/**
 * @brief Initializes I2C communication
 */
void setupI2C() {
    if (!Wire.begin(I2C_DEV_ADDR, SDA_PIN, SCL_PIN, 100000)) {
        Serial.println("Failed to initialize I2C slave!");
        while (1);
    }
    Serial.println("I2C slave initialized successfully.");

    Wire.onReceive(onReceive);
    Wire.onRequest(onRequest);
}

/**
 * @brief Initializes LoRa communication
 */
void setupLoRa() {
    Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);
    RadioEvents.RxDone = OnRxDone;

    Radio.Init(&RadioEvents);
    Radio.SetChannel(RF_FREQUENCY);
    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
                      LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                      LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                      0, true, 0, 0, LORA_IQ_INVERSION_ON, true);
    Serial.println("LoRa receiver initialized.");
}

 *******************************************************************************
 * Description: This program demonstrates sending data over I2C from STM32
 *              to an ESP32. It initializes GPIO, I2C, and the system clock.
 *              The program toggles an LED before and after sending the data.
 *******************************************************************************/

/* Includes ------------------------------------------------------------------ */
#include "main.h"
#include "stm32l4xx.h"

/* Private function prototypes ----------------------------------------------- */
void SystemClock_Config(void);
void GPIO_I2C1_Init(void);
void I2C1_Init(void);
void Delay_ms(uint32_t ms);
void I2C_SendNumber(uint8_t number);

/* Main ---------------------------------------------------------------------- */
int main(void) {
    // Initialize HAL, clock, and GPIO
    HAL_Init();
    GPIO_I2C1_Init();
    I2C1_Init();

    // Configure LED on PB7
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
    GPIOB->MODER &= ~(GPIO_MODER_MODE7); // Clear mode bits
    GPIOB->MODER |= (1 << GPIO_MODER_MODE7_Pos); // Set as output

    uint8_t number_to_send = 6;

    while (1) {
//        GPIOB->ODR |= (1 << 7); // Turn ON LED
        Delay_ms(500); // Delay for 1 second
        I2C_SendNumber(number_to_send);
//        GPIOB->ODR &= ~(1 << 7); // Turn OFF LED
        Delay_ms(500); // Delay for 1 second
    }
}

/* -----------------------------------------------------------------------------
 * Function : Delay_ms
 * Action   : Simple millisecond delay using SysTick
 ----------------------------------------------------------------------------- */
void Delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1; // 1 ms delay at 16 MHz
    SysTick->VAL = 0;          // Clear current value
    SysTick->CTRL = 5;         // Enable SysTick with processor clock

    for (uint32_t i = 0; i < ms; i++) {
        while (!(SysTick->CTRL & 0x10000)); // Wait for COUNTFLAG
    }

    SysTick->CTRL = 0; // Disable SysTick
}

/* -----------------------------------------------------------------------------
 * Function : GPIO_I2C1_Init
 * Action   : Configures PB8 and PB9 for I2C SCL and SDA operation
 ----------------------------------------------------------------------------- */
void GPIO_I2C1_Init(void) {
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable GPIOB clock

    // Configure PB8 (SCL) and PB9 (SDA) as alternate function (AF4)
    GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
    GPIOB->MODER |= (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1); // AF mode
    GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);       // Open-drain
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9); // Medium speed
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9);     // No pull-up/pull-down
    GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL8_Pos) | (4 << GPIO_AFRH_AFSEL9_Pos); // AF4
}

/* -----------------------------------------------------------------------------
 * Function : I2C1_Init
 * Action   : Initializes the I2C1 peripheral with 400 kHz settings
 ----------------------------------------------------------------------------- */
void I2C1_Init(void) {
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN; // Enable I2C1 clock
    I2C1->CR1 &= ~I2C_CR1_PE;             // Disable I2C peripheral
    I2C1->CR1 &= ~I2C_CR1_ANFOFF;         // Enable analog filter
    I2C1->CR1 &= ~I2C_CR1_DNF;            // Disable digital filter
    I2C1->TIMINGR = 0x00303D5B;           // Timing for 16 MHz SYSCLK
    I2C1->CR2 &= ~I2C_CR2_ADD10;          // 7-bit addressing
    I2C1->CR1 |= I2C_CR1_PE;              // Enable I2C peripheral
}

/* -----------------------------------------------------------------------------
 * Function : I2C_SendNumber
 * Action   : Sends a single byte (number) to the ESP32 over I2C
 ----------------------------------------------------------------------------- */
void I2C_SendNumber(uint8_t number) {
    uint8_t ESP32_ADDRESS = 0x3C; // Replace with the actual ESP32 address

    while (I2C1->ISR & I2C_ISR_BUSY); // Wait until I2C is ready

    I2C1->CR2 = (ESP32_ADDRESS << 1)         // Set ESP32 address
                | (1 << I2C_CR2_NBYTES_Pos)  // Set 1 byte to send
                | I2C_CR2_AUTOEND;           // Enable STOP after transmission
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;            // Write mode
    I2C1->CR2 |= I2C_CR2_START;              // Generate START condition
    while (!(I2C1->ISR & I2C_ISR_TXIS));     // Wait for TXIS flag
    I2C1->TXDR = number;                     // Send data
    GPIOB->ODR |= (1 << 7); // Turn ON LED
    while (!(I2C1->ISR & I2C_ISR_STOPF));    // Wait for STOP condition
    I2C1->ICR = I2C_ICR_STOPCF;              // Clear STOP flag
}

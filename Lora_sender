/* Heltec Automation send communication test example
 *
 * Function:
 * 1. Send data from a esp32 device over hardware 
 *  
 * Description:
 * 
 * HelTec AutoMation, Chengdu, China
 * 成都惠利特自动化科技有限公司
 * www.heltec.org
 *
 * this project also realess in GitHub:
 * https://github.com/Heltec-Aaron-Lee/WiFi_Kit_series
 * */

#include "LoRaWan_APP.h"
#include "Arduino.h"
#include <Wire.h>
#include "HT_SSD1306Wire.h"

// LoRa configuration
#define RF_FREQUENCY                                915000000 // Hz
#define TX_OUTPUT_POWER                             5        // dBm
#define LORA_BANDWIDTH                              0         // [0: 125 kHz,
                                                              //  1: 250 kHz,
                                                              //  2: 500 kHz,
                                                              //  3: Reserved]
#define LORA_SPREADING_FACTOR                       7         // [SF7..SF12]
#define LORA_CODINGRATE                             1         // [1: 4/5,
                                                              //  2: 4/6,
                                                              //  3: 4/7,
                                                              //  4: 4/8]
#define LORA_PREAMBLE_LENGTH                        8         // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT                         0         // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
#define LORA_IQ_INVERSION_ON                        false
#define RX_TIMEOUT_VALUE                            1000
#define BUFFER_SIZE                                 30 // Define the payload size here

char txpacket[BUFFER_SIZE];
bool lora_idle = true;

static RadioEvents_t RadioEvents;
void OnTxDone(void);
void OnTxTimeout(void);

// Ultrasonic sensor configuration
#define trigPin 47 // GPIO pin for triggering the ultrasonic rangefinder
#define echoPin 48 // GPIO pin for receiving the echo signal

void setup() {
    Serial.begin(115200);
    Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);

    // Initialize LoRa
    RadioEvents.TxDone = OnTxDone;
    RadioEvents.TxTimeout = OnTxTimeout;
    Radio.Init(&RadioEvents);
    Radio.SetChannel(RF_FREQUENCY);
    Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                      LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                      LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                      true, 0, 0, LORA_IQ_INVERSION_ON, 3000);

    // Set up ultrasonic sensor pins
    pinMode(trigPin, OUTPUT); // Set trigger pin as output
    pinMode(echoPin, INPUT);  // Set echo pin as input
}

/**
 * @brief Sends a pulse to the ultrasonic rangefinder and calculates the distance.
 * 
 * @return int Distance in centimeters.
 */
int getSDist() {
    long duration = 0;  // Variable to store pulse duration
    int distance = 0;   // Variable to store calculated distance

    // Clear the trigPin by setting it LOW
    digitalWrite(trigPin, LOW);
    delayMicroseconds(5);

    // Send a 10-microsecond pulse to trigPin
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    // Measure the duration of the echo pulse
    duration = pulseIn(echoPin, HIGH);

    // Calculate the distance in cm (speed of sound: 0.034 cm/us)
    distance = duration * 0.034 / 2;

    // Print the distance to the Serial Monitor
    Serial.print("Distance = ");
    Serial.print(distance);
    Serial.println(" cm");

    delay(50); // Short delay for sensor stability
    return distance;
}

void loop() {
    if (lora_idle == true) {
        delay(1000); // Send data every second

        // Get the ultrasonic distance
        int distance = getSDist();

        // Format the distance as a string to send over LoRa
        sprintf(txpacket, "%d", distance);

        // Log the packet to Serial for debugging
        Serial.printf("\r\nSending packet: \"%s\", length: %d\r\n", txpacket, strlen(txpacket));

        // Send the packet over LoRa
        Radio.Send((uint8_t *)txpacket, strlen(txpacket));
        lora_idle = false;
    }

    Radio.IrqProcess();
}

void OnTxDone(void) {
    Serial.println("TX done...");
    lora_idle = true;
}

void OnTxTimeout(void) {
    Radio.Sleep();
    Serial.println("TX Timeout...");
    lora_idle = true;
}

#include "LoRaWan_APP.h"
#include "Arduino.h"

#define RF_FREQUENCY 915000000 // Hz
#define TX_OUTPUT_POWER 5      // dBm
#define LORA_BANDWIDTH 0       // [0: 125 kHz, 1: 250 kHz, 2: 500 kHz]
#define LORA_SPREADING_FACTOR 7 // [SF7..SF12]
#define LORA_CODINGRATE 1       // [1: 4/5, 2: 4/6, 3: 4/7, 4: 4/8]
#define LORA_PREAMBLE_LENGTH 8  // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT 0   // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON false
#define LORA_IQ_INVERSION_ON false
#define RX_TIMEOUT_VALUE 1000
#define BUFFER_SIZE 30 // Define the payload size here

char txpacket[BUFFER_SIZE];
char rxpacket[BUFFER_SIZE];
bool lora_idle = true;

static RadioEvents_t RadioEvents;

void OnTxDone(void);
void OnTxTimeout(void);
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr);

void setup() {
    Serial.begin(115200);
    Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);

    RadioEvents.TxDone = OnTxDone;
    RadioEvents.TxTimeout = OnTxTimeout;
    RadioEvents.RxDone = OnRxDone;

    Radio.Init(&RadioEvents);
    Radio.SetChannel(RF_FREQUENCY);
    Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                      LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                      LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                      true, 0, 0, LORA_IQ_INVERSION_ON, 3000);
    Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
                      LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                      LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                      0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

    Serial.println("LoRa sender initialized and ready for requests.");
}

void loop() {
    if (lora_idle) {
        Serial.println("Listening for requests...");
        Radio.Rx(0); // Enter RX mode to listen for requests
        lora_idle = false;
    }

    Radio.IrqProcess(); // Handle LoRa IRQs
}

/**
 * @brief LoRa TX Done event handler.
 */
void OnTxDone(void) {
    Serial.println("Transmission complete.");
    lora_idle = true;
}

/**
 * @brief LoRa TX Timeout event handler.
 */
void OnTxTimeout(void) {
    Serial.println("Transmission timeout.");
    Radio.Sleep();
    lora_idle = true;
}

/**
 * @brief LoRa RX Done event handler. Responds to receiver requests.
 */
void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr) {
    memcpy(rxpacket, payload, size);
    rxpacket[size] = '\0';

    Serial.printf("Received request: \"%s\" with RSSI: %d\n", rxpacket, rssi);

    if (strcmp(rxpacket, "Request Data") == 0) {
        Serial.println("Preparing data for transmission...");
        sprintf(txpacket, "Response: Hello Receiver!");

        Radio.Sleep(); // Ensure the radio is idle before sending
        Radio.Send((uint8_t *)txpacket, strlen(txpacket));
    }
    lora_idle = true;
}
